{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","quotes","currentQuote","currentAuthor","handleNewQuotes","bind","assertThisInitialized","length","random","Math","floor","setState","quote","author","_this2","fetch","then","response","json","_this$state","link","encodeURIComponent","react_default","a","createElement","id","className","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAqDeA,qBAjDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,CACJC,OAAQ,IAEVC,aAAc,GACdC,cAAe,IAEjBX,EAAKY,gBAAkBZ,EAAKY,gBAAgBC,KAArBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KATPA,iFAahB,IAAMe,EAASZ,KAAKI,MAAMC,KAAKC,OAAOM,OAChCC,EAASC,KAAKC,MAAMD,KAAKD,SAASD,GACxCZ,KAAKgB,SAAS,CACZT,aAAcP,KAAKI,MAAMC,KAAKC,OAAOO,GAAQI,MAC7CT,cAAeR,KAAKI,MAAMC,KAAKC,OAAOO,GAAQK,qDAI/B,IAAAC,EAAAnB,KACjBoB,MAAM,0IACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAhB,GACEc,EAAKH,SAAS,CAAEX,SAChB,IAAMO,EAASO,EAAKf,MAAMC,KAAKC,OAAOM,OAChCC,EAASC,KAAKC,MAAMD,KAAKD,SAASD,GACxCO,EAAKH,SAAS,CACZT,aAAcY,EAAKf,MAAMC,KAAKC,OAAOO,GAAQI,MAC7CT,cAAeW,EAAKf,MAAMC,KAAKC,OAAOO,GAAQK,4CAKnD,IAAAM,EACiCxB,KAAKI,MAArCG,EADDiB,EACCjB,aAAcC,EADfgB,EACehB,cAChBiB,EAAO,+EAAiFC,mBAAoBnB,EAAe,KAAOC,GACxI,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAOH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oBAAb,KAAf,IAAsDxB,GACtDoB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAR,IAAmBtB,GACnBmB,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYE,QAAShC,KAAKS,iBAArC,aACAkB,EAAAC,EAAAC,cAAA,KAAGI,KAAMR,EAAMK,GAAG,eAAcH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,2BA5CnCG,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.f46f3c0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: {\n        quotes: []\n      },\n      currentQuote: \"\",\n      currentAuthor: \"\"\n    }\n    this.handleNewQuotes = this.handleNewQuotes.bind(this);\n  }\n\n  handleNewQuotes() {\n    const length = this.state.data.quotes.length;\n    const random = Math.floor(Math.random()*length);\n    this.setState({\n      currentQuote: this.state.data.quotes[random].quote,\n      currentAuthor: this.state.data.quotes[random].author\n    })\n  }\n\n  componentDidMount(){\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n      .then(response => response.json())\n      .then(data =>{ \n              this.setState({ data });\n              const length = this.state.data.quotes.length;\n              const random = Math.floor(Math.random()*length);\n              this.setState({\n                currentQuote: this.state.data.quotes[random].quote,\n                currentAuthor: this.state.data.quotes[random].author\n              })\n            });\n      \n  }\n  render() {\n    const { currentQuote, currentAuthor } = this.state;\n    const link = 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"' + encodeURIComponent( currentQuote + '\" ' + currentAuthor);\n    return (\n      <div id=\"quote-box\">\n        <div id=\"text\"><i className=\"fa fa-quote-left\"> </i> {currentQuote}</div>\n        <div id=\"author\">-{currentAuthor}</div>\n        <button id=\"new-quote\" onClick={this.handleNewQuotes}>New quote</button>\n        <a href={link} id=\"tweet-quote\"><i className=\"fa fa-twitter\"></i></a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}